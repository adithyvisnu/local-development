version: '3'

services:
  mongodb:
    image: mongo
    container_name: "mongodb_dc"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_DATABASE=admin
      - MONGO_INITDB_ROOT_USERNAME=localhost
      - MONGO_INITDB_ROOT_PASSWORD=adithganteng
    volumes:
      - ./../data/mongo:/data/db
    networks:
      - web
    ports:
      - 27017:27017
    command: mongod --auth
  
  redis:
    image: redis
    container_name: "redis_dc"
    command: redis-server --requirepass devpass
    volumes:
      - ./../data/redis:/data
    ports:
      - 6379:6379
    networks:
      - web
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: "zookeeper_dc"
    ports:
      - 2181:2181
    volumes: 
      - ./../data/zookeeper:/opt/zookeeper-3.4.13/data
    networks:
      - web
  
  kafka:
    image: wurstmeister/kafka
    container_name: "kafka_dc"
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      # KAFKA_PORT: 9092
      # port = 9092
      # advertised.host.name = localhost or 127.0.0.1
      # advertised.listeners=PLAINTEXT://YOUR_IP:9092
      # listeners = PLAINTEXT://0.0.0.0:9092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092,PLAINTEXT_INTERNAL://kafka:29092
      # KAFKA_LISTENERS: PLAINTEXT://:9092
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - ./../data/kafka:/kafka
    networks:
      - web

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - web


  # zookeeper:
  #   image: 'bitnami/zookeeper:3.4.12'
  #   container_name: "zookeeper_dc"
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   networks:
  #     - web

  # kafka:
  #   hostname: 'kafka'
  #   container_name: "kafka_dc"
  #   image: 'bitnami/kafka:2.0.0'
  #   ports:
  #     - '9092:9092'
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper_dc:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - web
      
  
  # ELK
  elasticsearch:
    build:
      context: deployments/elk/elasticsearch/
      # args:
      #   ELK_VERSION: $ELK_VERSION
    volumes:
      - ./deployments/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./deployments/elk/elasticsearch/esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    networks:
      - web

  logstash:
    build:
      context: deployments/elk/logstash/
      # args:
      #   ELK_VERSION: $ELK_VERSION
    volumes:
      - ./deployments/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./deployments/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - web
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: deployments/elk/kibana/
      # args:
      #   ELK_VERSION: $ELK_VERSION
    volumes:
      - ./deployments/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    networks:
      - web
    depends_on:
      - elasticsearch

    
  # minio: 
  #   image: minio/minio
  #   container_name: minio_dc
  #   volumes: 
  #     - ./../data/minio:/data
  #   ports: 
  #     - 7000:9000
  #   command: server ./../data/minio
  #   environment: 
  #     - "MINIO_ACCESS_KEY=MINIOADITH"
  #     - "MINIO_SECRET_KEY=ADITHGANTENG"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:7000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

  # mysql:
  #   image: mysql:latest
  #   container_name: mysql_dc
  #   ports: 
  #     - 3306:3306
  #   volumes: 
  #     - ./../data/mysql:/var/lib/mysql
  #     - ./init_mysql.sql:/docker-entrypoint-initdb.d/setup.sql
  #   environment: 
  #     - "MYSQL_ALLOW_EMPTY_PASSWORD=yes"
  #   networks: 
  #     - web

  # postgre:
  #   image: postgres:9.6
  #   container_name: postgre_dc
  #   ports: 
  #     - 5432:5432
  #   volumes: 
  #     - ./../data/postgre:/var/lib/postgresql/data
  #   environment: 
  #     - "POSTGRES_PASSWORD=123qweasd"
  #   networks: 
  #     - web

  # oracle:
  #   image: store/oracle/database-enterprise:12.2.0.1
  #   container_name: oracle_dc
  #   ports:
  #     - 1521:1521
  #   volumes:
  #     - ./../data/oracle:/opt/oracle/oradata
  #   environment:
  #     - ORACLE_SID=ORACLEDB
  #     - ORACLE_PDB=PDB
  #     - ORACLE_PWD=123qweasd

  # adminer:
  #   image: adminer:latest
  #   container_name: adminer_sql_dc
  #   ports: 
  #     - 8080:8080
  #   networks: 
  #     - web

networks:
  web:
    driver: bridge
